#!/usr/bin/env perl

=head1 NAME

yum-line - Utility for managing staged-release yum repositories

=cut

use strict;
use warnings;
use v5.10.0;

use Term::ReadKey;
use Yum::Line;

=head1 SYNOPSIS

    # Execute command 'command' with options and additional, command specific
    # arguments
    yum-line [options] <command> [arg1] [arg2] ...

    # Initialise yum repositories
    yum-line init

    # Mirror obsolete upstream OS repositories
    # FIXME: called obsolete
    yum-line sync-obsolete

    # Synchronise upstream repositories to local mirrors
    yum-line sync

    # Load new packages from upstream mirrors into 'stop' repositories
    yum-line load <stop> [package1] [package2] ...

    # Promote packages from 'stop' to next stage repositories
    yum-line promote <stop> [package1] [package2] ...

    # Clean older packages from 'stop' repositories
    yum-line clean <stop> [package1] [package2] ...

    # List packages available from repository
    # FIXME: non-upstream repos
    yum-line list <repo> [package1] [package2] ...

    # Dump understood configuration
    yum-line dump

Options:

    --config                        File containing line configuration. See L<Yum::Line>for more information.
    FIXME: --help                          Show help text.
    FIXME: --train=<train1>,<train2>,...   Only work on listed trains
    FIXME: -y, --assumeyes                 Assume yes; assume the answer to any question asked is 'yes'
    FIXME: -n, --assumeno                  Assume no; assume the answer to any question asked is 'no'

=head1 COMMANDS

=head2 init

Initialise the line repositories. Creates an empty repository for each line-stop
pair if it does not exist. Links each os-stop repository to the upstream
os-version repository. These links will be dangling if L</sync>/L</sync-obsolete>
have not been run.

=head2 sync

Synchronise local mirrors of upstream repositories. For each upstream repository,
retrieve the current set of packages so the mirror matches upstream exactly. If
an upstream definition does not have a sync location, the repository is left
alone. Upstreams that are marked obsolete are also left alone.

=head2 sync-obsolete

Synchronise local mirrors of obsolete OS repositories. Does the same as L</sync>,
but for upstreams that are marked obsolete. This command is split from sync under
the assumption that obsolete repositories do not change so it is a waste to sync
them.

=head2 load, loadable

If run without any packages, load will load every available updated package into
the specified stop repositories. If one or more packages or package globs are
specified, yum-line will only load the listed packages. While loading packages,
yum-line will B<not> ensure that any dependencies are satisfied.

To show what load would do, the loadable command displays the changes, but does
not actually apply them.

=head2 promote, promotable

If run without any packages, promote will move the latest version of each package
update available in the specified stop to the next stop.  If one or more packages
or package globs are specified, yum-line will only promote the listed packages.
While promoting packages, yum-line will B<not> ensure that any dependencies are
satisfied.

To show what promote would do, the promotable command displays the changes, but does
not actually apply them.

=head2 clean, cleanable

If run without any packages, clean will remove packages from the specified stop
where there is a newer version available at that point in the line. If one or
more packages or package globs are specified, yum-line will only clean the listed
packages.

To show what clean would do, the cleanable command displays the changes, but does
not actually apply them.

To understand better how clean works, consider a line with three stops: dev,
test, and prod. The package foo has multiple versions:
  dev:  foo-1.0, foo-1.6
  test: foo-1.2, foo-1.3
  prod: foo-1.1, foo-1.4

'clean dev' will remove foo-1.0 because foo-1.6 is available.

'clean test' will remove foo-1.2 and foo-1.3 because foo-1.4 is available.

'clean prod' will remove foo-1.1 because foo-1.4 is available.

=head2 list, listall

Show the packages available in the specified repository.

The listall command will show all versions for each package, rather than just
the latest.

=head2 dump

The dump command prints the line configuration as understood by yum-line. It is
useful for confirming that the configuration file is correct.

=cut

my $line = Yum::Line->new_with_options;

my $command = shift;

if ($command eq 'clean' || $command eq 'cleanable') {
	my $stop = shift;

	stop_action($stop, 'cleanable', $command);

} elsif ($command eq 'init') {
	my $stop = shift;

	foreach my $train ($line->base, map $line->train($_), $line->train_names) {
		say 'Initializing ', $train->name;
		print $train->init;
	}

} elsif ($command eq 'list') {
	my $name = shift;
	my $repo = $line->upstream($name);

	say_package_header();
	foreach my $name ($repo->package_names) {
		my $package = $repo->package($name);
		say_package($package);
	}

} elsif ($command eq 'listall') {
	my $name = shift;
	my $repo = $line->upstream($name);

	say_package_header();
	foreach my $name ($repo->package_names) {
		my @all = $repo->package_all($name);
		my $package = shift @all;
		say_package($package);
		say_package($_, 1) foreach (@all);
	}

} elsif ($command eq 'load' || $command eq 'loadable') {
	my $stop = shift;

	stop_action($stop, 'loadable', $command);

} elsif ($command eq 'promote' || $command eq 'promotable') {
	my $stop = shift;

	stop_action($stop, 'promotable', $command);

} elsif ($command eq 'obsolete') {
	$line->base->get_obsolete;

} elsif ($command eq 'sync') {
	foreach my $name ($line->upstream_names) {
		print "Synchronising upstream $name\n";
		$line->upstream($name)->sync;
		print $line->upstream($name)->sync_log;
	}

} elsif ($command eq 'dump') {
	say 'Config file: ', $line->config_file;
	say 'Base';
	say_base($line->base);

	say "\nUpstream Repositories";
	foreach my $name ($line->upstream_names) {
		say_repo($line->upstream($name));
	}

	say "\nTrain Repositories";
	foreach my $name ($line->train_names) {
		say_train($line->train($name));
	}
} else {
	die "must pass command\n";
}
exit 0;


sub say_base {
	my $base = shift;

	say '   Name ', $base->name;
	say '   Base ', $base->base;
	say '   Source ', $base->source;
	say '   Version ', $base->version;
	say '   Uses ', join (', ', @{ $base->_upstream_names });
	say '   Train';
	say "      $_->{name} $_->{version}" foreach ($base->stop_definitions);
}

sub say_package {
	my ($package, $secondary) = @_;

	foreach my $file ($package->packages) {
		say sprintf '  %-50s %-15s %-15s %-12s %-10s %s',
			($secondary ? '' : $file->name),
			$file->version,
			$file->release,
			$file->arch,
			$file->repo // '',
			$file->file;
	}
}

sub say_package_header {
	say sprintf '  %-50s %-15s %-15s %-12s %-10s', qw(Name Version Release Arch Repo);
}

sub say_repo {
	my $repo = shift;

	say '   Name ', $repo->name;
	say $repo->source
		? '      Source '. $repo->source_subbed
		: '      Local';
	say '      Directory ', $repo->directory;
	say '      Arch ', $repo->arch;
	say '      Rel ', $repo->rel;
	say '      Only Packages ', join (', ', $repo->restrict)
		if ($repo->restrict);
}

sub say_result {
	my $result = shift;

	foreach my $train ($result->trains) {
		say 'For train ', $train;
		say_package_header();
		foreach my $package ($result->packages($train)) {
			say_package($package);
		}
	}
}

sub say_train {
	my $train = shift;

	say '   Name ', $train->name;
	say '      Base ', $train->base;
	say '      Uses ', join (', ', $train->upstream_names);
}

sub stop_action {
	my ($stop, $check, $command) = @_;

	my $candidates = $line->$check($stop);
	say_result($candidates);
	exit if ($check eq $command);

	my $answer = y_n('Is this OK?');
	if ($answer eq 'y') {
		print $line->$command($stop, $candidates);
	}
}

sub y_n {
	my $question = shift;

	my $answer;
	while (1) {
		print "$question [y/N] ";
		$answer = lc(ReadLine(0));
		chomp $answer;
		$answer = 'n' if (!$answer);
		last if ($answer eq 'n' || $answer eq 'y');
	}

	return $answer;
}
