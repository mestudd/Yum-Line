#!/usr/bin/env perl
use strict;
use warnings;
use v5.10.0;

use Term::ReadKey;
use Yum::Line;

my $line = Yum::Line->new_with_options;

my $command = shift;

if ($command eq 'list') {
	my $name = shift;
	my $repo = $line->upstream($name);

	printf '  %-50s %-15s %-15s %-12s'."\n", qw(Name Version Release Arch);
	foreach my $name ($repo->package_names) {
		my $package = $repo->package($name);
		printf '  %-50s %-15s %-15s %-12s'."\n",
			$package->name,
			$package->version,
			$package->release,
			$package->arch;
	}

} elsif ($command eq 'listall') {
	my $name = shift;
	my $repo = $line->upstream($name);

	printf '  %-50s %-15s %-15s %-12s'."\n", qw(Name Version Release Arch);
	foreach my $name ($repo->package_names) {
		my @all = $repo->package_all($name);
		my $package = shift @all;
		printf '  %-50s %-15s %-15s %-12s'."\n",
			$package->name,
			$package->version,
			$package->release,
			$package->arch;
		printf '  %-50s %-15s %-15s %-12s'."\n",
				'',
				$_->version,
				$_->release,
				$_->arch
			foreach (@all);
	}

} elsif ($command eq 'loadable') {
	my $stop = shift;

	foreach my $train ($line->base, map $line->train($_), $line->train_names) {
		say 'Into ', $train->name;
		say sprintf '  %-50s %-15s %-15s %-12s %-10s', qw(Name Version Release Arch Repo);
		foreach my $package ($train->loadable($stop)) {
			printf '  %-50s %-15s %-15s %-12s %-10s %s'."\n",
				$package->name,
				$package->version,
				$package->release,
				$package->arch,
				$package->repo // '', $package->file;
		}
	}

} elsif ($command eq 'load') {
	my $stop = shift;

	foreach my $train ($line->base, map $line->train($_), $line->train_names) {
		say 'Into ', $train->name;
		say sprintf '  %-50s %-15s %-15s %-12s', qw(Name Version Release Arch);
		foreach my $package ($train->loadable($stop)) {
			printf '  %-50s %-15s %-15s %-12s'."\n",
				$package->name,
				$package->version,
				$package->release,
				$package->arch;
		}
	}

	my $answer;
	while (1) {
		print 'Is this ok [y/N] ';
		$answer = lc(ReadLine(0));
		chomp $answer;
		$answer = 'n' if (!$answer);
		last if ($answer eq 'n' || $answer eq 'y');
	}
	if ($answer eq 'y') {
		foreach my $train ($line->base, map $line->train($_), $line->train_names) {
			print $train->load($stop);
		}
	}

} elsif ($command eq 'promotable') {
	my $stop = shift;

	foreach my $train ($line->base, map $line->train($_), $line->train_names) {
		say 'Into ', $train->name;
		say sprintf '  %-50s %-15s %-15s %-12s %-10s', qw(Name Version Release Arch Repo);
		foreach my $package ($train->promotable($stop)) {
			printf '  %-50s %-15s %-15s %-12s %-10s %s'."\n",
				$package->name,
				$package->version,
				$package->release,
				$package->arch,
				$package->repo // '', $package->file;
		}
	}

} elsif ($command eq 'promote') {
	my $stop = shift;

	foreach my $train ($line->base, map $line->train($_), $line->train_names) {
		say 'Into ', $train->name;
		say sprintf '  %-50s %-15s %-15s %-12s', qw(Name Version Release Arch);
		foreach my $package ($train->promotable($stop)) {
			printf '  %-50s %-15s %-15s %-12s'."\n",
				$package->name,
				$package->version,
				$package->release,
				$package->arch;
		}
	}

	my $answer;
	while (1) {
		print 'Is this ok [y/N] ';
		$answer = lc(ReadLine(0));
		chomp $answer;
		$answer = 'n' if (!$answer);
		last if ($answer eq 'n' || $answer eq 'y');
	}
	if ($answer eq 'y') {
		foreach my $train ($line->base, map $line->train($_), $line->train_names) {
			print $train->promote($stop);
		}
	}

} elsif ($command eq 'obsolete') {
	$line->base->get_obsolete;

} elsif ($command eq 'rsync') {
	foreach my $name ($line->upstream_names) {
		print "Synchronising upstream $name\n";
		$line->upstream($name)->rsync;
	}

} elsif ($command eq 'dump') {
	use Data::Dumper;
#$line->_upstream;
#warn Dumper($line);
	say 'Config file: ', $line->config_file;
	say 'Base';
#warn Dumper($line->base);
	say_base($line->base);

	say "\nUpstream Repositories";
	foreach my $name ($line->upstream_names) {
		say_repo($line->upstream($name));
	}

	say "\nTrain Repositories";
	foreach my $name ($line->train_names) {
		say_train($line->train($name));
	}
} else {
	die "must pass command\n";
}
exit 0;


sub say_base {
	my $base = shift;

	say '   Name ', $base->name;
	say '   Base ', $base->base;
	say '   Sync ', $base->sync;
	say '   Version ', $base->version;
	say '   Uses ', join (', ', @{ $base->_upstream_names });
	say '   Train';
	say "      $_->{name} $_->{version}" foreach ($base->stop_definitions);
}

sub say_repo {
	my $repo = shift;

	say '   Name ', $repo->name;
	say $repo->sync
		? '      Sync '. $repo->sync_subbed
		: '      Local';
	say '      Directory ', $repo->directory;
	say '      Arch ', $repo->arch;
	say '      Rel ', $repo->rel;
	say '      Only Packages ', join (', ', $repo->restrict)
		if ($repo->restrict);
}

sub say_train {
	my $train = shift;

	say '   Name ', $train->name;
	say '      Base ', $train->base;
	say '      Uses ', join (', ', $train->upstream_names);
}
